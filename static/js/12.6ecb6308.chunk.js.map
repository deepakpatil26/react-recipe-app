{"version":3,"file":"static/js/12.6ecb6308.chunk.js","mappings":"+JAMA,MAAMA,EAAkBA,KACtBC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,uDAAsDC,SAClE,CAAC,EAAG,EAAG,GAAGC,KAAKC,IACdC,EAAAA,EAAAA,MAAA,OAAaJ,UAAU,gBAAeC,SAAA,EACpCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iCACfD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iDAFPG,OAQVE,EAAeC,IAAA,IAAC,MAAEC,EAAK,QAAEC,GAASF,EAAA,OACtCF,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,kBAAiBC,SAAA,EAC9BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oBAAmBC,SAC/BM,EAAME,SAAW,6BAEpBV,EAAAA,EAAAA,KAAA,UACEW,QAASF,EACTR,UAAU,mFAAkFC,SAC7F,gBAGG,EA2GR,EAjGiBU,KACf,MAAOC,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,KAClCC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,IACpCP,EAAOU,IAAYH,EAAAA,EAAAA,UAAS,MAC7BI,GAASC,EAAAA,EAAAA,KA8BTC,EAAeC,UACnBL,GAAa,GACbC,EAAS,MACT,IACE,MAAMK,OAhCUD,WAClB,IACE,MAAME,QAAaC,MACjB,qGAA0GC,KAG5G,IAAKF,EAAKG,GAAI,CACZ,GAAoB,MAAhBH,EAAKI,OACP,MAAM,IAAIC,MAAM,kDAElB,GAAoB,MAAhBL,EAAKI,OACP,MAAM,IAAIC,MAAM,qDAElB,MAAMC,QAAkBN,EAAKO,OAC7B,MAAM,IAAIF,MAAM,4BAA4BL,EAAKI,UAAUE,IAC7D,CAEA,MAAMP,QAAaC,EAAKQ,OACxB,IAAKT,EAAKU,QACR,MAAM,IAAIJ,MAAM,oCAElB,OAAON,EAAKU,OACd,CAAE,MAAOzB,GAEP,MADA0B,QAAQ1B,MAAM,eAAgBA,GACxBA,CACR,GAOqB2B,CAAYhB,EAAOiB,MACtCtB,EAAYS,EACd,CAAE,MAAOc,GACPnB,EAASmB,EACX,CAAC,QACCpB,GAAa,EACf,GAOF,OAJAqB,EAAAA,EAAAA,YAAU,KACRjB,GAAc,GACb,CAACF,EAAOiB,OAEPpB,GACKhB,EAAAA,EAAAA,KAACD,EAAe,IAGrBS,GACKR,EAAAA,EAAAA,KAACM,EAAY,CAACE,MAAOA,EAAOC,QAASY,IAGtB,IAApBR,EAAS0B,QAETlC,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,gCAA+BC,SAAA,CAAC,wBACvBiB,EAAOiB,KAAK,gBAMtCpC,EAAAA,EAAAA,KAACwC,EAAAA,EAAOC,IAAG,CACTxC,UAAU,uDACVyC,QAAS,CAAEC,QAAS,GACpBC,QAAS,CAAED,QAAS,GACpBE,KAAM,CAAEF,QAAS,GACjBG,WAAY,CAAEC,SAAU,IAAM7C,SAE7BW,EAASV,KAAI6C,IAAA,IAAC,GAAEC,EAAE,MAAEC,EAAK,MAAEC,GAAOH,EAAA,OACjChD,EAAAA,EAAAA,KAACwC,EAAAA,EAAOC,IAAG,CAETxC,UAAU,yEACVmD,WAAY,CAAEC,MAAO,MACrBP,WAAY,CAAEC,SAAU,IAAM7C,UAE9BG,EAAAA,EAAAA,MAACiD,EAAAA,GAAI,CAACC,GAAI,WAAWN,IAAK/C,SAAA,EACxBF,EAAAA,EAAAA,KAAA,OACEwD,IAAKL,EACLM,IAAKP,EACLjD,UAAU,2BACVyD,QAAQ,UAEV1D,EAAAA,EAAAA,KAAA,MAAIC,UAAU,kEAAiEC,SAAEgD,QAZ9ED,EAcM,KAEJ,C","sources":["pages/Cuisines.jsx"],"sourcesContent":["import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Link, useParams } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\n\nconst LoadingSkeleton = () => (\n  <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\n    {[1, 2, 3].map((n) => (\n      <div key={n} className=\"animate-pulse\">\n        <div className=\"bg-gray-200 h-56 rounded-lg\"></div>\n        <div className=\"h-4 bg-gray-200 rounded mt-4 mx-auto w-3/4\"></div>\n      </div>\n    ))}\n  </div>\n);\n\nconst ErrorMessage = ({ error, onRetry }) => (\n  <div className=\"text-center p-4\">\n    <div className=\"text-red-500 mb-4\">\n      {error.message || 'Failed to load cuisines'}\n    </div>\n    <button\n      onClick={onRetry}\n      className=\"px-4 py-2 bg-orange-500 text-white rounded hover:bg-orange-600 transition-colors\"\n    >\n      Try Again\n    </button>\n  </div>\n);\n\nErrorMessage.propTypes = {\n  error: PropTypes.shape({\n    message: PropTypes.string\n  }).isRequired,\n  onRetry: PropTypes.func.isRequired\n};\n\nconst Cuisines = () => {\n  const [cuisines, setCuisines] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const params = useParams();\n\n  const getCuisines = async (name) => {\n    try {\n      const resp = await fetch(\n        `https://api.spoonacular.com/recipes/complexSearch?apiKey=${process.env.REACT_APP_FOOD_API_KEY}&cuisine=${name}`\n      );\n\n      if (!resp.ok) {\n        if (resp.status === 402) {\n          throw new Error('API quota exceeded. Please try again tomorrow.');\n        }\n        if (resp.status === 401) {\n          throw new Error('Invalid API key. Please check your configuration.');\n        }\n        const errorText = await resp.text();\n        throw new Error(`Failed to fetch recipes: ${resp.status} ${errorText}`);\n      }\n\n      const data = await resp.json();\n      if (!data.results) {\n        throw new Error('Invalid response format from API');\n      }\n      return data.results;\n    } catch (error) {\n      console.error(\"Fetch error:\", error);\n      throw error;\n    }\n  };\n\n  const loadCuisines = async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const data = await getCuisines(params.type);\n      setCuisines(data);\n    } catch (err) {\n      setError(err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadCuisines();\n  }, [params.type]);\n\n  if (isLoading) {\n    return <LoadingSkeleton />;\n  }\n\n  if (error) {\n    return <ErrorMessage error={error} onRetry={loadCuisines} />;\n  }\n\n  if (cuisines.length === 0) {\n    return (\n      <div className=\"text-center text-gray-500 p-4\">\n        No recipes found for {params.type} cuisine.\n      </div>\n    );\n  }\n\n  return (\n    <motion.div\n      className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\"\n      animate={{ opacity: 1 }}\n      initial={{ opacity: 0 }}\n      exit={{ opacity: 0 }}\n      transition={{ duration: 0.5 }}\n    >\n      {cuisines.map(({ id, title, image }) => (\n        <motion.div\n          key={id}\n          className=\"rounded-lg overflow-hidden shadow-md hover:shadow-lg transition-shadow\"\n          whileHover={{ scale: 1.02 }}\n          transition={{ duration: 0.2 }}\n        >\n          <Link to={`/recipe/${id}`}>\n            <img\n              src={image}\n              alt={title}\n              className=\"w-full h-56 object-cover\"\n              loading=\"lazy\"\n            />\n            <h4 className=\"p-4 text-lg font-medium hover:text-orange-500 transition-colors\">{title}</h4>\n          </Link>\n        </motion.div>\n      ))}\n    </motion.div>\n  );\n};\n\nexport default Cuisines;\n"],"names":["LoadingSkeleton","_jsx","className","children","map","n","_jsxs","ErrorMessage","_ref","error","onRetry","message","onClick","Cuisines","cuisines","setCuisines","useState","isLoading","setIsLoading","setError","params","useParams","loadCuisines","async","data","resp","fetch","name","ok","status","Error","errorText","text","json","results","console","getCuisines","type","err","useEffect","length","motion","div","animate","opacity","initial","exit","transition","duration","_ref2","id","title","image","whileHover","scale","Link","to","src","alt","loading"],"sourceRoot":""}